using System;
using System.Collections.Generic;
using System.Linq;
//using System.Text;
 
using UnityEngine;
 
 
/// <summary>
/// TODO
/// </summary>
public class ExLaunchPad : PartModule
{
	[KSPField]
	public bool aero = false;
	[KSPField]
	public bool rocket = true;
	[KSPField]
	public bool debug = false;
	private CraftBrowser craftBrowser;
	private bool showCraftBrowser = false;
	
	private List<Vessel> bases;
	
	private void destroyShip(ShipConstruct nship, float availableRocketParts, float availableLiquidFuel, float availableOxidizer, float availableMonoPropellant)
	{
		this.part.RequestResource("RocketParts", -availableRocketParts);
		this.part.RequestResource("LiquidFuel", -availableLiquidFuel);
		this.part.RequestResource("Oxidizer", -availableOxidizer);
		this.part.RequestResource("MonoPropellant", -availableMonoPropellant);
		nship.parts[0].localRoot.explode();
	}
	
	private void getAndLoadShip2(string filename)
	{
		print (filename);
		//FlightState state = new FlightState();
		//ShipConstruct nship = ShipConstruction.LoadShip("/Applications/KSP_osx 2/Ships/VAB/Two-Stage Lander.craft");
		ShipConstruct nship = ShipConstruction.LoadShip(filename);
		float mass = 0;
		float liquidFuel = 0;
		float oxidizer = 0;
		float monoPropellant = 0;
		foreach (Part i in nship.parts) {
			mass = mass + i.mass;
			foreach (PartResource r in i.Resources) {
				if (r.resourceName=="LiquidFuel") {
					liquidFuel = liquidFuel + (float)r.amount;
				} else if (r.resourceName=="Oxidizer") {
					oxidizer = oxidizer + (float)r.amount;
				} else if (r.resourceName=="MonoPropellant") {
					monoPropellant = monoPropellant + (float)r.amount;
				}
			}
		}
		print ("Total mass: "+mass.ToString());
		print ("Total liquid fuel: "+liquidFuel.ToString());
		print ("Total oxidizer: "+oxidizer.ToString());
		print ("Total mono propellant: "+monoPropellant.ToString());
		float availableRocketParts = this.part.RequestResource("RocketParts", mass);
		float availableLiquidFuel = this.part.RequestResource("LiquidFuel", liquidFuel);
		float availableOxidizer = this.part.RequestResource("Oxidizer", oxidizer);
		float availableMonoPropellant = this.part.RequestResource("MonoPropellant", monoPropellant);
		//ShipConstruction.PutShipToGround(nship, this.part.transform);
		//ShipConstruction.AssembleForLaunch(nship, "External Launchpad", state);
		if (debug)
		{
			showCraftBrowser = false;
			return;
		}
		if (availableRocketParts==mass) {
			if (availableLiquidFuel==liquidFuel) {
				if (availableOxidizer==oxidizer) {
					if (availableMonoPropellant==monoPropellant) { //TODO: consume amount based on rocket weight
						Staging.GenerateStagingSequence(nship.Parts[0]);
		    			print("loaded ship.");
					} else {
						print ("not enough monopropellant");
						destroyShip(nship, availableRocketParts, availableLiquidFuel, availableOxidizer, availableMonoPropellant);
					}
				} else {
					print("not enough oxidizer");
					destroyShip(nship, availableRocketParts, availableLiquidFuel, availableOxidizer, availableMonoPropellant);
				}
			} else {
				print ("not enough fuel");
				this.part.RequestResource("RocketParts", -availableRocketParts);
				destroyShip(nship, availableRocketParts, availableLiquidFuel, availableOxidizer, availableMonoPropellant);
			}
		} else {
			print ("not enough rocketparts");
			destroyShip(nship, availableRocketParts, availableLiquidFuel, availableOxidizer, availableMonoPropellant);
			//FlightGlobals.Bodies.
			//nship.Remove(nship.parts[0].localRoot);
			//nship.Clear();
			//ShipConstruction.CheckLaunchSiteClear(state, "External Launchpad", true);
		}
		showCraftBrowser = false;
	}
	// TODO: what is this second string?
	private void getAndLoadShip(string filename, string b) 
	{
		ConfigNode cf = ConfigNode.Load(filename);
		ConfigNode[] nodes = cf.GetNodes("PART");
		float mass = 0;
		//float liquidFuel = 0;
		//float oxidizer = 0;
		//float monoPropellant = 0;
		//float x = 0;
		
		print ("106");
		
		Part p;
		Dictionary<string,float> resources = new Dictionary<string, float>();
		foreach (ConfigNode node in nodes) {
			print (node.name);
			p = PartLoader.getPartInfoByName(node.GetValue("part").Remove(node.GetValue("part").LastIndexOf("_"))).partPrefab;
			mass = mass + p.mass;
			foreach (PartResource r in p.Resources) {
				float val;
				if (resources.TryGetValue(r.resourceName, out val))
				{
					resources[r.resourceName] = val+(float)r.amount;
				} else {
					resources.Add(r.resourceName, (float)r.amount);
				}
			}
		}
		print ("126");
		bool success = true;
		List<string> keys = new List<string> (resources.Keys);
		foreach (string k in keys) {
			print ("129");
			print (k);
			float avail = this.part.RequestResource(k, resources[k]);
			if (avail!=resources[k]) {
				success = false;
				print ("Not enough "+k);
			}
			resources[k] = avail;
		}
		print ("138");
		if (debug) success = true;
		if (success==false) {
			print ("no success");
			foreach (KeyValuePair<string,float> k in resources) {
				this.part.RequestResource(k.Key, -k.Value);
			}
			return;
		}
		print ("146");
		FlightState state = new FlightState();
		ShipConstruct nship = ShipConstruction.LoadShip(filename);
		print ("149");
		ShipConstruction.PutShipToGround(nship, this.part.transform);
		ShipConstruction.AssembleForLaunch(nship, "External Launchpad", HighLogic.CurrentGame.flagURL, state);
		//ShipConstruction.AssembleForLaunch(nship, "External Launchpad", state);
		Staging.beginFlight();
		//StageManager.beginFlight();
		nship.parts[0].vessel.ResumeStaging();
		Staging.GenerateStagingSequence(nship.parts[0].localRoot);
		Staging.RecalculateVesselStaging(nship.parts[0].vessel);
		//Staging.AddStageAt (0);
		//Staging.AddStageAt(Staging.GetStageCount(nship.Parts));
		print ("Successfully loaded "+filename);
		showCraftBrowser = false;
	}
	private void closed() { showCraftBrowser = false; }
	public void getShip()
	{
		print("Initializing craft browser...");
		string[] path = HighLogic.CurrentGame.Title.Split(' ');
		Array.Resize<string>(ref path, path.Length-1);
		string strpath = string.Join(" ", path);
		//if (aero) {
		//	print (ShipConstruction.GetShipsSubfolderFor(HighLogic.LoadedScene)+"/../SPH");
		//	craftBrowser = new CraftBrowser(new Rect(Screen.width / 2, 100, 350, 500), ShipConstruction.GetShipsSubfolderFor(HighLogic.LoadedScene)+"/../SPH",
    	//	//"testing", "Select a ship to load", getAndLoadShip, closed, HighLogic.Skin, EditorLogic.ShipFileImage);
		//	strpath, "Select a ship to load", getAndLoadShip, closed, HighLogic.Skin, EditorLogic.ShipFileImage);
		//} else {
			//craftBrowser = new CraftBrowser(new Rect(Screen.width / 2, 100, 350, 500), ShipConstruction.GetShipsSubfolderFor(HighLogic.LoadedScene),
    		//strpath, "Select a ship to load", getAndLoadShip, closed, HighLogic.Skin, EditorLogic.ShipFileImage);
			craftBrowser = new CraftBrowser(new Rect(Screen.width / 2, 100, 350, 500), ShipConstruction.GetShipsSubfolderFor(HighLogic.LoadedScene),
			strpath, "Select a ship to load", getAndLoadShip, closed, HighLogic.Skin, EditorLogic.ShipFileImage, true);
		//}
		showCraftBrowser = true;
		//craftBrowser.OnGUI();
	}
	public void getPlane()
	{
		print("Initializing craft browser...");
		string[] path = HighLogic.CurrentGame.Title.Split(' ');
		Array.Resize<string>(ref path, path.Length-1);
		string strpath = string.Join(" ", path);
		craftBrowser = new CraftBrowser(new Rect(Screen.width / 2, 100, 350, 500), ShipConstruction.GetShipsSubfolderFor(HighLogic.LoadedScene)+"/../SPH",
    	//"testing", "Select a ship to load", getAndLoadShip, closed, HighLogic.Skin, EditorLogic.ShipFileImage);
		strpath, "Select a ship to load", getAndLoadShip, closed, HighLogic.Skin, EditorLogic.ShipFileImage, true);
		
		showCraftBrowser = true;
	}
	private void OnGUI()
	{
		if (showCraftBrowser)
		{
			craftBrowser.OnGUI();
		}
	}
	private void OnLoad()
	{
		 bases = FlightGlobals.fetch.vessels;
		foreach (Vessel v in bases) {
			print (v.name);
		}
	}
	[KSPEvent(active = true, guiActive = true, guiName = "Load Ship")]
	    public void toggleLandingSystem()
	    {
			print("Loading ship...");
		    getShip();
    }
}



public class RocketBuilder: PartModule
{
	private float consumedMetal = 0;
	private bool manufacturing = false;
	[KSPEvent(active = true, guiActive = true, guiName = "Start Manufacturing")]
	public void startManufacturing()
	{
		if (manufacturing) {
			Events["startManufacturing"].guiName = "Stop Manufacturing";
			manufacturing = false;
			print ("Shutting down work.");
		} else {
			print ("Going to work...");
			this.part.force_activate();
			//float gotmetal = this.part.RequestResource("Metal", 1);
			//this.part.RequestResource("RocketParts", -gotmetal);
			manufacturing = true;
		}
	}
	public override void OnFixedUpdate ()
	{
		if (manufacturing)
		{
			consumedMetal = consumedMetal + this.part.RequestResource("Metal",(float)0.2*TimeWarp.fixedDeltaTime);
			if (consumedMetal>1)
			{
				consumedMetal = 0;
				this.part.RequestResource("RocketParts", -1);
			}
		}
	}
}

public class Smelter: PartModule
{
	private bool isSmelting = false;
	private float consumedOre = 0;
	
	[KSPEvent(active = true, guiActive = true, guiName = "Smelt Ore")]
	public void startSmelting()
	{
		this.part.force_activate();
		print ("Smelting..");
		isSmelting = true;
	}
	public override void OnFixedUpdate ()
	{
		print ("Temperature: "+this.part.temperature.ToString());
		if (isSmelting)
		{
			consumedOre = this.part.RequestResource("Ore",(float)0.2*TimeWarp.fixedDeltaTime);
			this.part.RequestResource("Metal", -consumedOre);
			//this.part.temperature = this.part.temperature + 100*TimeWarp.fixedDeltaTime;
			this.part.temperature = 4900;
		}
	}
}

/*public class Dynomite: PartModule
{
	[KSPField]
	public float impact = 100;
	
	public void Explode () {
		var DepositUnder = Kethane.KethaneController.GetInstance(this.vessel).GetDepositUnder();
		print ("KABOOM!!!");
		if (DepositUnder != null && (DepositUnder is Kethane.OreDeposit)) {
			bool found = false;
			foreach (Kethane.Blast b in DepositUnder.Blasts) {
				if (Math.Abs(b.lat-part.vessel.latitude)<1/part.vessel.mainBody.pqsController.radius && Math.Abs(b.lon-part.vessel.longitude)<1/part.vessel.mainBody.pqsController.radius)
				{
					b.amount += impact;
					found = true;
				}
			}
			if (!found) {
				DepositUnder.Blasts.Add(new Kethane.Blast((float)part.vessel.latitude, (float)part.vessel.longitude));
				print ("Adding blast!!!! Boom.");
			}
			DepositUnder.Quantity += 100;
		}
	}
	
	public override void OnLoad(ConfigNode node)
	{
		part.OnJustAboutToBeDestroyed += Explode;
	}
}*/